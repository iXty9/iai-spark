
// This file is automatically generated from the connection service.
// Do not edit it directly.

import { getSupabaseClient } from '@/services/supabase/connection-service';
import { toast } from '@/hooks/use-toast';

// Get the Supabase client
const client = getSupabaseClient();

// Define a comprehensive type-compatible fallback client
const fallbackClient = {
  auth: {
    getSession: () => {
      toast({
        title: 'Connection Error',
        description: 'Supabase client is not available. Please initialize the application.',
        variant: 'destructive'
      });
      return Promise.resolve({ data: { session: null }, error: new Error('Client not initialized') });
    },
    signOut: () => Promise.resolve({ error: new Error('Client not initialized') }),
    signInWithPassword: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Client not initialized') }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    signUp: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Client not initialized') }),
    getUser: () => Promise.resolve({ data: { user: null }, error: new Error('Client not initialized') })
  },
  from: (table: string) => ({
    select: (columns?: string) => ({
      eq: (column: string, value: any) => ({
        limit: (limit: number) => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
        maybeSingle: () => Promise.resolve({ 
          data: null, 
          error: new Error('Client not initialized'), 
          status: 500,
          count: null
        })
      }),
      limit: (limit: number) => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
      maybeSingle: () => Promise.resolve({ 
        data: null, 
        error: new Error('Client not initialized'),
        status: 500,
        count: null
      }),
    }),
    insert: (data: any) => Promise.resolve({ 
      data: null, 
      error: new Error('Client not initialized'),
      status: 500,
      count: null
    }),
    update: (data: any) => ({
      eq: (column: string, value: any) => Promise.resolve({ 
        data: null, 
        error: new Error('Client not initialized'),
        status: 500,
        count: null
      })
    }),
    eq: (column: string, value: any) => ({
      maybeSingle: () => Promise.resolve({ 
        data: null, 
        error: new Error('Client not initialized'), 
        status: 500,
        count: null
      })
    })
  }),
  storage: {
    from: (bucket: string) => ({
      upload: (path: string, file: any) => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
      getPublicUrl: (path: string) => ({ data: { publicUrl: '' } })
    })
  },
  functions: {
    invoke: (functionName: string, options?: { body?: any; headers?: any }) => 
      Promise.resolve({ 
        data: null, 
        error: new Error('Client not initialized'), 
        status: 500,
        count: null
      })
  }
};

// Handle reset configuration scenarios
export const supabase = client || fallbackClient;

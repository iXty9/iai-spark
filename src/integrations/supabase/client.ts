
// This file is automatically generated from the connection service.
// Do not edit it directly.

import { getSupabaseClient } from '@/services/supabase/connection-service';
import { toast } from '@/hooks/use-toast';
import { PostgrestResponse, PostgrestSingleResponse } from '@supabase/supabase-js';
import { emitSupabaseConnectionEvent } from '@/utils/debug';

// Get the Supabase client
const client = getSupabaseClient();

// Emit connection status for debugging
if (client) {
  emitSupabaseConnectionEvent('connected', null);
} else {
  emitSupabaseConnectionEvent('disconnected', 'Client not initialized');
}

// Fallback client for handling cases when the Supabase client isn't available
const fallbackClient = {
  auth: {
    getSession: () => {
      // Track connection error for debugging
      emitSupabaseConnectionEvent('auth_error', 'Client not initialized');
      
      toast({
        title: 'Connection Error',
        description: 'Supabase client is not available. Please check configuration or reconnect.',
        variant: 'destructive',
        action: {
          altText: "Reconnect",
          onClick: () => window.location.href = '/supabase-auth'
        }
      });
      return Promise.resolve({ data: { session: null }, error: new Error('Client not initialized') });
    },
    signOut: () => Promise.resolve({ error: new Error('Client not initialized') }),
    signInWithPassword: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Client not initialized') }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    signUp: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Client not initialized') }),
    getUser: () => Promise.resolve({ data: { user: null }, error: new Error('Client not initialized') })
  },
  from: (table: string) => ({
    select: (columns?: string) => {
      // Create properly typed return object
      const responseObj: any = {
        eq: (column: string, value: any) => Promise.resolve({ 
          data: null, 
          error: new Error('Client not initialized'),
          count: null
        }),
        neq: () => responseObj,
        gt: () => responseObj,
        lt: () => responseObj,
        gte: () => responseObj,
        lte: () => responseObj,
        like: () => responseObj,
        ilike: () => responseObj,
        is: () => responseObj,
        in: () => responseObj,
        contains: () => responseObj,
        containedBy: () => responseObj,
        filter: () => responseObj,
        match: () => responseObj,
        single: () => Promise.resolve({ 
          data: null, 
          error: new Error('Client not initialized'),
          count: null
        }),
        maybeSingle: () => Promise.resolve({ 
          data: null, 
          error: new Error('Client not initialized'),
          count: null
        }),
        order: () => responseObj,
        limit: () => responseObj,
        range: () => responseObj,
      };
      return responseObj;
    },
    insert: () => Promise.resolve({
      data: null,
      error: new Error('Client not initialized')
    }),
    update: () => ({
      eq: () => Promise.resolve({
        data: null,
        error: new Error('Client not initialized')
      }),
      match: () => Promise.resolve({
        data: null,
        error: new Error('Client not initialized')
      })
    }),
    delete: () => ({
      eq: () => Promise.resolve({
        data: null,
        error: new Error('Client not initialized')
      }),
      match: () => Promise.resolve({
        data: null,
        error: new Error('Client not initialized')
      })
    }),
    rpc: () => Promise.resolve({
      data: null,
      error: new Error('Client not initialized')
    })
  }),
  storage: {
    from: (bucket: string) => ({
      upload: () => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
      getPublicUrl: () => ({ data: { publicUrl: '' } }),
      list: () => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
      remove: () => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
    }),
    getBucket: () => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
    createBucket: () => Promise.resolve({ data: null, error: new Error('Client not initialized') }),
  },
  functions: {
    invoke: () => Promise.resolve({
      data: null,
      error: new Error('Client not initialized'),
      status: 500,
      count: null
    })
  }
};

// Handle reset configuration scenarios
export const supabase = client || fallbackClient;

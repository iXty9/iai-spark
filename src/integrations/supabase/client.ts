
// This file is automatically generated from the connection service.
// Do not edit it directly.

import { getSupabaseClient } from '@/services/supabase/connection-service';
import { toast } from '@/hooks/use-toast';
import { emitSupabaseConnectionEvent } from '@/utils/debug';
import { logger } from '@/utils/logging';

// Initialize client as null, will be set properly after bootstrap
let client = null;

// Attempt to get the client immediately
client = getSupabaseClient();

// If client isn't available, try again after a delay to allow bootstrap to complete
if (!client) {
  logger.info('Supabase client not available immediately, scheduling retry', {
    module: 'supabase-client'
  });
  
  let retries = 0;
  const maxRetries = 3;
  
  // Function to retry client initialization
  const retryClientInit = () => {
    retries++;
    client = getSupabaseClient();
    
    // Emit connection status after delayed initialization
    if (client) {
      logger.info(`Supabase client initialized on retry ${retries}`, {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('connected', null);
      
      // Clear any scheduled retries
      if (retryTimeoutId) {
        clearTimeout(retryTimeoutId);
        retryTimeoutId = null;
      }
    } else if (retries < maxRetries) {
      logger.warn(`Supabase client still not available after retry ${retries}/${maxRetries}`, {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('disconnected', `Client not initialized after retry ${retries}`);
      
      // Schedule next retry with increasing delay
      const delay = 1500 * Math.pow(1.5, retries);
      retryTimeoutId = setTimeout(retryClientInit, delay);
    } else {
      logger.error('Supabase client initialization failed after multiple retries', {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('disconnected', 'Client not initialized after multiple retries');
      
      // Check if we're already on the initialize page to prevent redirect loops
      if (!window.location.pathname.includes('/initialize')) {
        // Show error toast after all retries failed
        toast({
          title: 'Connection Error',
          description: 'Could not connect to database. Check configuration or try initializing again.',
          variant: 'destructive',
          action: {
            altText: "Initialize",
            onClick: () => window.location.href = '/initialize'
          }
        });
      }
    }
  };
  
  // Schedule first retry
  let retryTimeoutId = setTimeout(retryClientInit, 1500);
} else {
  // Emit connection status for debugging if client is available immediately
  logger.info('Supabase client initialized immediately', {
    module: 'supabase-client'
  });
  emitSupabaseConnectionEvent('connected', null);
}

// Export a function that gets the client
export const supabase = (() => {
  return function getClient() {
    if (!client) {
      // If client is still not available, force a retry
      client = getSupabaseClient();
      
      if (!client) {
        logger.error('Supabase client requested but not available', {
          module: 'supabase-client'
        });
        
        // Don't throw an error if we're already on the initialize page
        // This prevents infinite redirects and allows the initialize page to work
        if (!window.location.pathname.includes('/initialize')) {
          logger.info('Redirecting to initialize page', {
            module: 'supabase-client',
            currentPath: window.location.pathname
          });
          window.location.href = '/initialize';
          return null; // Return null instead of throwing
        }
        
        // Return null instead of throwing an error when on initialize page
        return null;
      }
    }
    
    return client;
  };
})()();

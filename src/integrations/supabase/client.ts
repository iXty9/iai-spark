
// This file is automatically generated from the connection service.
// Do not edit it directly.

import { getSupabaseClient } from '@/services/supabase/connection-service';
import { toast } from '@/hooks/use-toast';
import { emitSupabaseConnectionEvent } from '@/utils/debug';
import { logger } from '@/utils/logging';

// Initialize client as null, will be set properly after bootstrap
let client = null;

// Attempt to get the client immediately
client = getSupabaseClient();

// If client isn't available, try again after a delay to allow bootstrap to complete
if (!client) {
  logger.info('Supabase client not available immediately, scheduling retry', {
    module: 'supabase-client'
  });
  
  // First retry after 2.5 seconds
  setTimeout(() => {
    client = getSupabaseClient();
    
    // Emit connection status after delayed initialization
    if (client) {
      logger.info('Supabase client initialized on first retry', {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('connected', null);
    } else {
      logger.warn('Supabase client still not available after first retry', {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('disconnected', 'Client not initialized after first retry');
      
      // Second retry after another 2 seconds
      setTimeout(() => {
        client = getSupabaseClient();
        
        if (client) {
          logger.info('Supabase client initialized on second retry', {
            module: 'supabase-client'
          });
          emitSupabaseConnectionEvent('connected', null);
        } else {
          logger.error('Supabase client initialization failed after multiple retries', {
            module: 'supabase-client'
          });
          emitSupabaseConnectionEvent('disconnected', 'Client not initialized after multiple retries');
          
          // Show error toast after all retries failed
          toast({
            title: 'Connection Error',
            description: 'Could not connect to database. Please check configuration or reload the page.',
            variant: 'destructive',
            action: {
              altText: "Reconnect",
              onClick: () => window.location.reload()
            }
          });
        }
      }, 2000);
    }
  }, 2500);
} else {
  // Emit connection status for debugging if client is available immediately
  logger.info('Supabase client initialized immediately', {
    module: 'supabase-client'
  });
  emitSupabaseConnectionEvent('connected', null);
}

// Export a function that gets the client
export const supabase = (() => {
  return function getClient() {
    if (!client) {
      // If client is still not available, force a retry
      client = getSupabaseClient();
      
      if (!client) {
        logger.error('Supabase client requested but not available', {
          module: 'supabase-client'
        });
        
        // Don't throw an error if we're already on the initialize page
        // This prevents infinite redirects and allows the initialize page to work
        if (window.location.pathname !== '/initialize') {
          logger.info('Redirecting to initialize page', {
            module: 'supabase-client',
            currentPath: window.location.pathname
          });
          window.location.href = '/initialize';
          return null; // Return null instead of throwing
        }
        
        // Return null instead of throwing an error when on initialize page
        return null;
      }
    }
    
    return client;
  };
})()();

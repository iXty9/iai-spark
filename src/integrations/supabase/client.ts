// This file is automatically generated from the connection service.
// Do not edit it directly.

import { getSupabaseClient } from '@/services/supabase/connection-service';
import { toast } from '@/hooks/use-toast';
import { emitSupabaseConnectionEvent } from '@/utils/debug';
import { logger } from '@/utils/logging';

// Initialize client as null, will be set properly after bootstrap
let client = null;
let isTabVisible = true;

// Keep track of tab visibility
if (typeof document !== 'undefined') {
  const handleVisibilityChange = () => {
    isTabVisible = document.visibilityState === 'visible';
    logger.debug('Tab visibility changed in supabase client', { 
      isVisible: isTabVisible 
    }, { module: 'supabase-client' });
  };
  
  document.addEventListener('visibilitychange', handleVisibilityChange);
  isTabVisible = document.visibilityState === 'visible';
}

// Attempt to get the client immediately (but only if tab is visible)
if (isTabVisible) {
  client = getSupabaseClient();
} else {
  logger.debug('Delaying initial Supabase client load as tab is inactive', { 
    isVisible: isTabVisible 
  }, { module: 'supabase-client' });
}

// If client isn't available, try again after a delay to allow bootstrap to complete
if (!client && isTabVisible) {
  logger.info('Supabase client not available immediately, scheduling retry', {
    module: 'supabase-client'
  });
  
  let retries = 0;
  const maxRetries = 2; // Reduced from 3 to 2
  
  // Function to retry client initialization
  const retryClientInit = () => {
    // Skip if tab is not visible
    if (!isTabVisible) {
      logger.debug('Skipping Supabase client retry as tab is inactive', {}, { module: 'supabase-client' });
      return;
    }
    
    retries++;
    client = getSupabaseClient();
    
    // Emit connection status after delayed initialization
    if (client) {
      logger.info(`Supabase client initialized on retry ${retries}`, {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('connected', null);
      
      // Clear any scheduled retries
      if (retryTimeoutId) {
        clearTimeout(retryTimeoutId);
        retryTimeoutId = null;
      }
    } else if (retries < maxRetries) {
      logger.warn(`Supabase client still not available after retry ${retries}/${maxRetries}`, {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('disconnected', `Client not initialized after retry ${retries}`);
      
      // Schedule next retry with increasing delay
      const delay = 2000 * Math.pow(1.5, retries); // Increased base delay
      retryTimeoutId = setTimeout(retryClientInit, delay);
    } else {
      logger.error('Supabase client initialization failed after multiple retries', {
        module: 'supabase-client'
      });
      emitSupabaseConnectionEvent('disconnected', 'Client not initialized after multiple retries');
      
      // Check if we're already on the initialize page to prevent redirect loops
      if (!window.location.pathname.includes('/initialize')) {
        // Show error toast after all retries failed
        toast({
          title: 'Connection Error',
          description: 'Could not connect to database. Check configuration or try initializing again.',
          variant: 'destructive',
          action: {
            altText: "Initialize",
            onClick: () => window.location.href = '/initialize'
          }
        });
      }
    }
  };
  
  // Schedule first retry
  let retryTimeoutId = setTimeout(retryClientInit, 2000); // Increased from 1500ms
} else if (client) {
  // Emit connection status for debugging if client is available immediately
  logger.info('Supabase client initialized immediately', {
    module: 'supabase-client'
  });
  emitSupabaseConnectionEvent('connected', null);
}

// Export a function that gets the client
export const supabase = (() => {
  return function getClient() {
    if (!client) {
      // Only attempt initialization if tab is visible
      if (isTabVisible) {
        // If client is still not available, force a retry
        client = getSupabaseClient();
        
        if (!client) {
          logger.error('Supabase client requested but not available', {
            module: 'supabase-client'
          });
          
          // Don't throw an error if we're already on the initialize page
          // This prevents infinite redirects and allows the initialize page to work
          if (!window.location.pathname.includes('/initialize')) {
            logger.info('Redirecting to initialize page', {
              module: 'supabase-client',
              currentPath: window.location.pathname
            });
            window.location.href = '/initialize';
            return null; // Return null instead of throwing
          }
          
          // Return null instead of throwing an error when on initialize page
          return null;
        }
      } else {
        // If tab is inactive, don't attempt to get client
        logger.debug('Supabase client requested while tab inactive', { 
          isVisible: isTabVisible
        }, { module: 'supabase-client' });
        return null;
      }
    }
    
    return client;
  };
})()();

// Add a safety check function
export function isClientReady(): boolean {
  try {
    // Check if the client and its auth property are defined
    return !!supabase && !!supabase.auth;
  } catch (e) {
    return false;
  }
}

// Add tab visibility tracking
export function isTabActive(): boolean {
  return isTabVisible;
}

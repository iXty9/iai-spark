
// This file is automatically generated from the connection service.
// Do not edit it directly.

import { getSupabaseClient } from '@/services/supabase/connection-service';
import { toast } from '@/hooks/use-toast';

// Get the Supabase client
const client = getSupabaseClient();

// Handle reset configuration scenarios
export const supabase = client || {
  // Provide fallback methods that show a toast when the client is not available
  auth: {
    getSession: () => {
      toast({
        title: 'Connection Error',
        description: 'Supabase client is not available. Please initialize the application.',
        variant: 'destructive'
      });
      return Promise.resolve({ data: { session: null }, error: new Error('Client not initialized') });
    },
    // Add other auth methods as needed
    signOut: () => Promise.resolve({ error: new Error('Client not initialized') }),
    signInWithPassword: () => Promise.resolve({ data: { user: null, session: null }, error: new Error('Client not initialized') }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
  },
  from: () => ({
    select: () => ({
      limit: () => Promise.resolve({ data: null, error: new Error('Client not initialized') })
    })
  }),
  // Add other methods as needed
};
